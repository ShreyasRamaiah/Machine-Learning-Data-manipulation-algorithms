# -*- coding: utf-8 -*-
"""NaiveBaye_Classifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kEdmijFWlBPqqIp1LVNQume1ftUJWPg_

###NAIVE BAYE CLASSIFIER
##SHREYAS SAMPANGI RAMAIAH
##ENG21CS0390
"""

import numpy as np
import pandas as pd

import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv('/content/car_accept.csv')
df

"""##EDA PROCESS"""

df.isnull()

print(df.isnull().sum())

"""##NAIVE BAYES CLASSIFICATION"""

num_acc = (df['Car_Acceptability'] == "acc").sum()
num_unacc = (df['Car_Acceptability'] == "unacc").sum()

P_acc = num_acc / df.shape[0]
P_unacc = num_unacc / df.shape[0]

print("P(Yes): ", P_acc)
print("P(No): ", P_unacc)

"""Car acceptibility prediction is done based on the following conditions:

Buying_price:med

Maintenance_price:low

Size_of_luggage:med

safety:high

Car_acceptibility?
"""

#conditional probability for buying price
P_buy_acc = len(df[(df['Buying_Price'] == "med") & (df['Car_Acceptability'] == "acc")]) / num_acc
P_buy_unacc = len(df[(df['Buying_Price'] == "med") & (df['Car_Acceptability'] == "unacc")]) / num_unacc
print("P(med|acc):", P_buy_acc)
print("P(med|unacc):", P_buy_unacc)

#conditional probability for maintenance price
P_main_acc = len(df[(df['Maintenance_Price'] == "low") & (df['Car_Acceptability'] == "acc")]) / num_acc
P_main_unacc = len(df[(df['Maintenance_Price'] == "low") & (df['Car_Acceptability'] == "unacc")]) / num_unacc
print("P(low|acc):", P_main_acc)
print("P(low|unacc):", P_main_unacc)

#conditional probability for size of luggage
P_lugg_acc = len(df[(df['Size_of_Luggage'] == "med") & (df['Car_Acceptability'] == "acc")]) / num_acc
P_lugg_unacc = len(df[(df['Size_of_Luggage'] == "med") & (df['Car_Acceptability'] == "unacc")]) / num_unacc
print("P(med|acc):", P_lugg_acc)
print("P(med|unacc):", P_lugg_unacc)

#conditional probability for safety
P_safe_acc = len(df[(df['Safety'] == "high") & (df['Car_Acceptability'] == "acc")]) / num_acc
P_safe_unacc = len(df[(df['Safety'] == "high") & (df['Car_Acceptability'] == "unacc")]) / num_unacc
print("P(high|acc):", P_safe_acc)
print("P(high|unacc):", P_safe_unacc)

#Calculate final likelihood or conditional probabilities for 'acc' and 'unacc' values
P_X_acc = P_buy_acc * P_main_acc * P_lugg_acc * P_safe_acc
P_X_unacc = P_buy_unacc * P_main_unacc * P_lugg_unacc * P_safe_unacc
print("P(X|acc):", P_X_acc)
print("P(X|unacc):", P_X_unacc)

#Evaluate Car Acceptance Probabilities Using Bayes' Theorem

# Probability for accepting a car
P_acc_X = P_X_acc * P_acc
print("Probability of accepting : ", P_acc_X)

# Probability for not accepting a car
P_unacc_X = P_X_unacc * P_unacc
print("Probability of not accepting : ", P_unacc_X)

"""##Since the value of probability of not accepting the car is more the model predicts that the car is unacceptable."""

#Encoding the categorical values of the dataset

from sklearn.preprocessing import LabelEncoder

label = LabelEncoder()
for column in df.columns:
  df[column] = label.fit_transform(df[column])

df

#Create separate DataFrames for feature and target

features_df = df.drop('Car_Acceptability', axis = 1)
target_df = df['Car_Acceptability']

print(features_df.shape)
print(target_df.shape)

#Importing train_test_split function
from sklearn.model_selection import train_test_split

#Split dataset into training set and test set
X_train, X_test, y_train, y_test = train_test_split(features_df, target_df, test_size = 0.3,
                                                    random_state = 2)

#Printing the shape of train and test sets.
print("Shape of X_train:", X_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_test:", y_test.shape)

#Implementing Naive Bayes Classifier

#Import the required CategoricalNB library for discreet dataset
from sklearn.naive_bayes import CategoricalNB

#Modeling the NB Classifier
nb_clf = CategoricalNB()
nb_clf.fit(X_train, y_train)

#Predicting the train and test sets
y_train_predict_nb = nb_clf.predict(X_train)
y_test_predict_nb = nb_clf.predict(X_test)

#Evaluate the accuracy scores
print('Accuracy on the training set: {:.2f}'.format(nb_clf.score(X_train, y_train)))
print('Accuracy on the test set: {:.2f}'.format(nb_clf.score(X_test, y_test)))

nb_clf.predict([[2, 1, 1, 0]])

"""###The outcome array([1]) indicates that the predicted value by the model for the target is "Unacceptable"
"""