# -*- coding: utf-8 -*-
"""logisticregression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YJBi6B-wkGsdLDmdE4trYYAI4a4cjoTM

##LOGISTIC REGRESSION
###*Shreyas Sampangi Ramaiah*
###*ENG21CS0390 5F*
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/stroke_dataset.csv')
df.info()

"""##EDA Process

"""

print(df.isnull().sum())

#bmi has 78 null records, so we need to either drop it or replace it.
mean=df['bmi'].mean()
df.fillna(mean, inplace=True)
#replacing null values
print(df.isnull().sum())

df.drop_duplicates(inplace=True)

"""STROKE PREDICTION"""

print("Records under Stroke column:")
print("\nNumber of records:")
print(df['stroke'].value_counts())
print("\nPercentage of records:")
print(df['stroke'].value_counts()*100/df.shape[0], "\n")

"""LOGISTIC REGRESSION WITH SIGMOID FUNCTION"""

def sigmoid(x):
    return pd.Series(1/(1+np.exp(-x)))
df['glucose_lvl'].describe()

"""Scaling the Glucose level values"""

def standard_scalar(series):
  new_series=(series-series.mean())/series.std()
  return new_series
scaled_gluc=standard_scalar(df['glucose_lvl'])

scaled_gluc_sig_output=sigmoid(scaled_gluc)
scaled_gluc_sig_output.describe()

def predict(sig_output, threshold):
    y_pred = [ 1 if output >= threshold else 0 for output in sig_output]
    return pd.Series(y_pred)

threshold = 0.5
stroke_pred = predict(scaled_gluc_sig_output, threshold)

print(f"Threshold value: {threshold}")
print(f"\nPredicted value counts:\n{stroke_pred.value_counts()}")
print(f"\nActual value counts:\n{df['stroke']. value_counts()}")

from sklearn.metrics import confusion_matrix

print(confusion_matrix(df['stroke'], stroke_pred))

from sklearn.metrics import classification_report

print(classification_report(df['stroke'], stroke_pred))

from sklearn.model_selection import train_test_split

X = df.drop(columns = 'stroke')
y = df['stroke']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)

"""Predicting Target Values for train set."""

from sklearn.linear_model import LogisticRegression

log_clf_1 = LogisticRegression()
log_clf_1.fit(X_train, y_train)
print(log_clf_1.score(X_train, y_train))
y_train_pred = log_clf_1.predict(X_train)

print("\n Confusion Matrix \n")
print(confusion_matrix(y_train, y_train_pred))

print("\n Classification Report\n")
print(classification_report(y_train, y_train_pred))

"""Predicting target values for test set"""

y_test_pred = log_clf_1.predict(X_test)

print(f"{'Test Set'.upper()}\n{'-' * 75}\nConfusion Matrix:")
print(confusion_matrix(y_test, y_test_pred))

print("\nClassification Report")
print(classification_report(y_test, y_test_pred))