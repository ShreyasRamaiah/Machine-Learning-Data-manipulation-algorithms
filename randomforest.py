# -*- coding: utf-8 -*-
"""randomforest

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_PJ5ZQJ289rupDlyXsZJYnnw1BRe2Nt_

##RANDOM FOREST CLASSIFIER
###SHREYAS SAMPANGI RAMAIAH
###ENG21CS0390
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/WineQT.csv')

print(df.info(), "\n")
print(df['quality'].value_counts(), "\n")

"""###It can be seen that there is an imbalance in the dataset.

###Building preliminary model.
"""

from sklearn.model_selection import train_test_split
x=df[df.columns]
x=x.drop('quality', axis=1)
y=df['quality']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)

"""###Building random forest classifier model"""

from sklearn.ensemble import RandomForestClassifier
rfclass = RandomForestClassifier()
rfclass.fit(x_train, y_train)
rfclass.score(x_train, y_train)

"""###Making predictions on the training set"""

rf_y_train_pred = pd.Series(rfclass.predict(x_train))
rf_y_train_pred.value_counts()

"""###Creating the confusion matrix between the actual and the predicted values for the train set and printing heat map."""

from sklearn.metrics import confusion_matrix, classification_report
labels = pd.Series(y_train).sort_values(ascending = True).unique()
rf_train_conf_matrix = confusion_matrix(y_train, rf_y_train_pred)

rf_train_cm_df = pd.DataFrame(rf_train_conf_matrix, columns = labels, index = labels)

plt.figure(figsize = (10, 5), dpi = 96)
sns.heatmap(rf_train_cm_df, annot = True)
plt.show()

"""###Creating the confusion matrix between the actual and the predicted values for the test set and printing heat map."""

rf_y_test_pred = pd.Series(rfclass.predict(x_test))

rf_test_conf_matrix = confusion_matrix(y_test, rf_y_test_pred)

rf_test_cm_df = pd.DataFrame(rf_test_conf_matrix, columns = labels, index = labels)

plt.figure(figsize = (10, 5), dpi = 96)
sns.heatmap(rf_test_cm_df, annot = True)
plt.show()

"""###Classification report"""

print(classification_report(y_test, rf_y_test_pred))