# -*- coding: utf-8 -*-
"""ML_KNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kx3zvK1whuviTRkzN8MISvQb3vhfbaEc

##KNN Classifier
###SHREYAS SAMPANGI RAMAIAH
###ENG21CS0390
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv("/content/Fake_bills.csv")
df

df.isnull().sum()

#EDA process to drop null values
df.dropna(inplace=True)

#Splitting the data into dependent and independent features
features_df = df.drop(['is_genuine'], axis = 1)
target_df = df['is_genuine']
features_df.head()

#Normalising the column values.
from sklearn.preprocessing import StandardScaler

standard_scaler = StandardScaler()
scaled_features = standard_scaler.fit_transform(features_df)
X_scaled = pd.DataFrame(scaled_features)
X_scaled.columns = features_df.columns
X_scaled.head()

#train-test split
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, target_df, test_size = 0.3,
                                                    random_state = 42, stratify = target_df)

#Training kNN classifier model for 'k = 3'
from sklearn.neighbors import KNeighborsClassifier
knn3 = KNeighborsClassifier(n_neighbors = 3)
knn3.fit(X_train, y_train)

print("Train set accuracy:", knn3.score(X_train, y_train))
print("Test set accuracy:", knn3.score(X_test, y_test))

#Training kNN classifier model for 'k = 7'
knn7 = KNeighborsClassifier(n_neighbors = 7)
knn7.fit(X_train, y_train)

print("Train set accuracy:", knn7.score(X_train, y_train))
print("Test set accuracy:", knn7.score(X_test, y_test))

"""###Finding the optimal 'k' value:"""

accuracy_train = []
accuracy_test= []

for k in range(1, 21):

    knn = KNeighborsClassifier(n_neighbors = k)
    knn.fit(X_train, y_train)
    accuracy_train.append(knn.score(X_train, y_train))
    accuracy_test.append(knn.score(X_test, y_test))

plt.figure(figsize = (10, 8))
plt.grid()
plt.xticks(range(1, 21, 1))
plt.plot(range(1, 21), accuracy_train, color= 'blue', label = "Train set accuracy")
plt.plot(range(1, 21), accuracy_test, color= 'red', label = "Test set accuracy")
plt.title('Accuracy Score vs. K Value')
plt.legend()
plt.xlabel('K')
plt.ylabel('Accuracy')
plt.show()

"""###From the graph it can be seen that the optimal 'k' value is 12"""

#Training kNN classifier model for 'k = 12'
knn12 = KNeighborsClassifier(n_neighbors = 12)
knn12.fit(X_train, y_train)
print("Train set accuracy:", knn12.score(X_train, y_train))
print("Test set accuracy:", knn12.score(X_test, y_test))

#Displaying the precision, recall and f1-score values.
from sklearn.metrics import classification_report
print(classification_report(y_test, knn12.predict(X_test)))